directive @auth on FIELD_DEFINITION

type User {
  id: Int!
  username: String!
  projects: [Project!]!
  gitAccounts: [GitAccount!]! # Make sure this is in your User type
}

type GitAccount {
  id: Int!
  provider: String!
  # providerUserId: String!
  # accessToken: String
  # refreshToken: String
  avatarUrl: String
  profileUrl: String
  name: String
  user: User!
  userId: Int!
}

type Project {
  id: Int!
  userId: Int!
  name: String!
  gitRepoUrl: String!
  createdAt: String!
  updatedAt: String!
  deployments: [Deployment!]!
  domains: [Domain!]!
}

enum DeploymentStatus {
  pending
  deploying
  success
  failed
}

type Deployment {
  id: Int!
  projectId: Int!
  deploymentUrl: String!
  version: String
  status: DeploymentStatus!
  buildOutputPath: String
  internalPort: Int
  dockerfileUsed: String
  errorMessage: String
  createdAt: String!
}

type Domain {
  id: Int!
  projectId: Int!
  domainName: String!
  sslCertificateId: Int
  sslCertificate: SslCertificate
  createdAt: String!
  updatedAt: String!
}

type SslCertificate {
  id: Int!
  certificateData: String!
  domains: [Domain!]!
}

type LoginResponse {
  token: String!
}

type Repository {
  name: String!
  html_url: String!
  # Add other relevant fields from the Git provider's API
}

type Query {
  projects: [Project!]!
  project(id: Int!): Project
  me: User
  repositories: [Repository!]! @auth
  deploymentStatus(id: Int!): Deployment
}

type Mutation {
  createProject(name: String!, gitRepoUrl: String!): Project!
  loginGit(provider: String!, code: String!): LoginResponse!
  deployProject(projectId: Int!): Deployment!
}
